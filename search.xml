<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Visual Studio快捷键汇总</title>
      <link href="/esblog/1.html"/>
      <url>/esblog/1.html</url>
      
        <content type="html"><![CDATA[<p>以下是Visual Studio常用快捷键的汇总，涵盖编辑、调试、文件操作、导航和视图等多个方面，帮助提升开发效率：</p><h2 id="常用编辑快捷键"><a href="#常用编辑快捷键" class="headerlink" title="常用编辑快捷键"></a>常用编辑快捷键</h2><ul><li><strong>注释代码</strong>：<code>Ctrl + K, Ctrl + C</code></li><li><strong>取消注释</strong>：<code>Ctrl + K, Ctrl + U</code></li><li><strong>代码格式化</strong>：<ul><li>格式化整个文档：<code>Ctrl + K, Ctrl + D</code></li><li>格式化选中内容：<code>Ctrl + K, Ctrl + F</code></li></ul></li><li><strong>复制整行代码（无需选中）</strong>：将光标放在行上，<code>Ctrl + C</code></li><li><strong>剪切整行代码</strong>：将光标放在行上，<code>Ctrl + X</code></li><li><strong>删除整行代码</strong>：<code>Ctrl + Shift + K</code></li><li><strong>撤销</strong>：<code>Ctrl + Z</code></li><li><strong>重做</strong>：<code>Ctrl + Y</code> 或 <code>Ctrl + Shift + Z</code></li><li><strong>查找</strong>：<code>Ctrl + F</code></li><li><strong>查找全部文件</strong>：<code>Ctrl + Shift + F</code></li><li><strong>替换</strong>：<code>Ctrl + H</code></li><li><strong>转到定义</strong>：<code>F12</code></li><li><strong>转到声明</strong>：<code>Ctrl + F12</code></li><li><strong>查找所有引用</strong>：<code>Shift + F12</code></li><li><strong>跳转到指定行</strong>：<code>Ctrl + G</code></li><li><strong>插入代码片段</strong>：<code>Ctrl + K, Ctrl + X</code></li><li><strong>切换书签</strong>：<code>Ctrl + K, Ctrl + K</code></li><li><strong>切换行注释</strong>（VS2022及以上）：<code>Ctrl + /</code> 或 <code>Ctrl + K, Ctrl + /</code></li></ul><h2 id="调试快捷键"><a href="#调试快捷键" class="headerlink" title="调试快捷键"></a>调试快捷键</h2><ul><li><strong>开始调试</strong>：<code>F5</code></li><li><strong>开始执行但不调试</strong>：<code>Ctrl + F5</code></li><li><strong>单步执行（进入函数）</strong>：<code>F11</code></li><li><strong>单步跳出（跳出函数）</strong>：<code>Shift + F11</code></li><li><strong>逐过程执行</strong>：<code>F10</code></li><li><strong>停止调试</strong>：<code>Shift + F5</code></li><li><strong>切换断点</strong>：<code>F9</code></li><li><strong>删除所有断点</strong>：<code>Ctrl + Shift + F9</code></li><li><strong>运行到光标处</strong>：<code>Ctrl + F10</code></li><li><strong>设置下一语句</strong>：<code>Ctrl + Shift + F10</code></li><li><strong>重启调试</strong>：<code>Ctrl + Shift + F5</code></li></ul><h2 id="文件和项目操作快捷键"><a href="#文件和项目操作快捷键" class="headerlink" title="文件和项目操作快捷键"></a>文件和项目操作快捷键</h2><ul><li><strong>新建项目</strong>：<code>Ctrl + Shift + N</code></li><li><strong>新建文件</strong>：<code>Ctrl + N</code></li><li><strong>打开文件</strong>：<code>Ctrl + O</code></li><li><strong>打开项目</strong>：<code>Ctrl + Shift + O</code></li><li><strong>保存当前文件</strong>：<code>Ctrl + S</code></li><li><strong>全部保存</strong>：<code>Ctrl + Shift + S</code></li><li><strong>添加新项</strong>：<code>Ctrl + Shift + A</code></li><li><strong>添加现有项</strong>：<code>Shift + Alt + A</code></li></ul><h2 id="视图和窗口快捷键"><a href="#视图和窗口快捷键" class="headerlink" title="视图和窗口快捷键"></a>视图和窗口快捷键</h2><ul><li><strong>打开解决方案资源管理器</strong>：<code>Ctrl + Alt + L</code></li><li><strong>打开属性窗口</strong>：<code>F4</code></li><li><strong>切换活动窗口</strong>：<code>Ctrl + Tab</code></li><li><strong>打开错误列表</strong>：<code>Ctrl + W, E</code></li><li><strong>打开输出窗口</strong>：<code>Ctrl + W, O</code></li><li><strong>打开任务列表</strong>：<code>Ctrl + W, T</code></li><li><strong>打开工具箱</strong>：<code>Ctrl + W, X</code></li><li><strong>打开断点窗口</strong>：<code>Ctrl + D, B</code></li><li><strong>打开即时窗口</strong>：<code>Ctrl + D, I</code></li></ul><h2 id="代码修复和导航"><a href="#代码修复和导航" class="headerlink" title="代码修复和导航"></a>代码修复和导航</h2><ul><li><strong>快速修复&#x2F;智能提示</strong>：<code>Ctrl + .</code> 或 <code>Ctrl + +</code></li><li><strong>查找下一个结果</strong>：<code>F3</code></li><li><strong>查找上一个结果</strong>：<code>Shift + F3</code></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化</title>
      <link href="/esblog/24365.html"/>
      <url>/esblog/24365.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-Matplotlib概述"><a href="#一-Matplotlib概述" class="headerlink" title="一.Matplotlib概述"></a>一.Matplotlib概述</h2><h3 id="一-Matplotlib概述-1"><a href="#一-Matplotlib概述-1" class="headerlink" title="(一) Matplotlib概述"></a>(一) Matplotlib概述</h3><p>​在Python中数据可视化工具分为免费和收费两种，其中免费的应用性较好的数据可视化工具有Matplotlip、Seaborn、交互式的数据可视化工具Bokeh。其中，Matplotlip是用于创建出版质量图表的绘图工具库，Seaborn是在Matplotlib基础上进行了更高级的API封装，从而使得作图更加容易。 </p><h3 id="（二）Matplotlib简介"><a href="#（二）Matplotlib简介" class="headerlink" title="（二）Matplotlib简介"></a>（二）Matplotlib简介</h3><p>使用Matplotlib实现数据图形化的优势是：</p><p>p 使用起来极其简单。</p><p>p 以渐进、交互式方式实现数据可视化。</p><p>p 表达式和文本使用LaTeX排版。</p><p>p 对图像元素控制力更强。</p><p>p 可输出PNG、PDF、SVG和EPS等多种格式。</p><h2 id="二-创建简单图形"><a href="#二-创建简单图形" class="headerlink" title="二.创建简单图形"></a>二.创建简单图形</h2><h3 id="（一）导入快速绘图的函数库"><a href="#（一）导入快速绘图的函数库" class="headerlink" title="（一）导入快速绘图的函数库"></a>（一）导入快速绘图的函数库</h3><p>​           <strong>import matplotlib.pyplot as plt</strong></p><h3 id="（二）-创建绘图对象—figure对象"><a href="#（二）-创建绘图对象—figure对象" class="headerlink" title="（二）  创建绘图对象—figure对象"></a>（二）  创建绘图对象—figure对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#一天24小时</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">25</span>,<span class="number">2</span>)</span><br><span class="line">y = [<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">22</span>,<span class="number">18</span>]</span><br><span class="line">z = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">25</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#创建绘图对象,设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>,facecolor=<span class="string">&#x27;pink&#x27;</span>,edgecolor=<span class="string">&#x27;#F00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制图表,label曲线名字在图例中显示, color曲线颜色, linewidth线条 粗细</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">&#x27;逐小时温度&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>,linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.plot(x,z,&#x27;b--&#x27;) #蓝色虚线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置各类图例和标签</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;hour&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;temperature&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;hourly weather&quot;</span>) <span class="comment">#标题</span></span><br><span class="line">plt.ylim(-<span class="number">10</span>,<span class="number">20</span>)<span class="comment">#y轴范围</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="（三）创建子图"><a href="#（三）创建子图" class="headerlink" title="（三）创建子图"></a>（三）创建子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子图</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">z = np.cos(x)</span><br><span class="line">k = x</span><br><span class="line"><span class="comment">#第一子图</span></span><br><span class="line">plt.subplot(<span class="number">221</span>)<span class="comment">#第一行左图</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">&quot;sin(x)&quot;</span>,color=<span class="string">&quot;red&quot;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>)<span class="comment">#第一行右图</span></span><br><span class="line">plt.plot(x,z,<span class="string">&quot;b--&quot;</span>,label=<span class="string">&quot;cos(x)&quot;</span>,)</span><br><span class="line">plt.subplot(<span class="number">212</span>)<span class="comment">#第二行</span></span><br><span class="line">plt.plot(x,k,<span class="string">&quot;g--&quot;</span>,label=<span class="string">&quot;$line(x)$&quot;</span>,)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matplotlib.get_configdir())</span><br><span class="line"><span class="built_in">print</span>(matplotlib.matplotlib_fname())</span><br><span class="line"><span class="built_in">print</span>(matplotlib.rc_params())</span><br></pre></td></tr></table></figure><h3 id="（四）matplotlibrc配置文件"><a href="#（四）matplotlibrc配置文件" class="headerlink" title="（四）matplotlibrc配置文件"></a>（四）matplotlibrc配置文件</h3><p>在Matplotlib中可以使用多个“matplotlibrc”配置文件，它们的搜索顺序：</p><p>p 当前路径</p><p>p 用户配置路径</p><p>p 系统配置路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置动态rc参数</span></span><br><span class="line"><span class="comment"># matplotlib.rc_params()</span></span><br><span class="line"><span class="comment"># plt.rcParams[&quot;lines.marker&quot;] = &quot;o&quot; #线上标记为圆圈</span></span><br><span class="line"><span class="comment"># plt.rcParams[&quot;lines.linewidth&quot;] = 10 #线粗细</span></span><br><span class="line"><span class="comment"># plt.rcParams[&quot;lines.linestyle&quot;] = &quot;-.&quot; #线样式  -.点划线</span></span><br><span class="line"><span class="comment"># plt.plot([1,2,3])  #绘制斜线标记字符.</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置字符字体样式大小</span></span><br><span class="line">matplotlib.rc(<span class="string">&quot;lines&quot;</span>,marker=<span class="string">&quot;o&quot;</span>,linewidth=<span class="number">3</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="comment">#方式一:设置中文</span></span><br><span class="line"><span class="comment"># font = &#123;&#x27;family&#x27;: &#x27;MicroSoft YaHei&#x27;,</span></span><br><span class="line"><span class="comment">#         &#x27;weight&#x27;: &#x27;bold&#x27;,</span></span><br><span class="line"><span class="comment">#         &#x27;size&#x27;: &#x27;16&#x27;&#125;</span></span><br><span class="line"><span class="comment"># matplotlib.rc(&#x27;font&#x27;, **font)  # pass in the font dict as kwargs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二: 当前字体</span></span><br><span class="line">my_font= font_manager.FontProperties(fname=<span class="string">&quot;fangzheng.ttf&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.title(<span class="string">&quot;rc() 案例&quot;</span>,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="（五）散点图"><a href="#（五）散点图" class="headerlink" title="（五）散点图"></a>（五）散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Emp_data = np.loadtxt(<span class="string">&#x27;Employedpopulation.csv&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>,usecols=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>),dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置正常显示中文和负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个绘图对象,并设置宽高</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment">#散点图,全部就业人员</span></span><br><span class="line">plt.scatter(Emp_data[<span class="number">0</span>],Emp_data[<span class="number">1</span>],c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"><span class="comment">#散点图,城镇就业人员</span></span><br><span class="line">plt.scatter(Emp_data[<span class="number">0</span>],Emp_data[<span class="number">2</span>],c=<span class="string">&#x27;g&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="comment">#散点图,乡村就业人员</span></span><br><span class="line">plt.scatter(Emp_data[<span class="number">0</span>],Emp_data[<span class="number">3</span>],c=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置轴和标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年份&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人员(万人)&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">2007</span>,<span class="number">2016</span>)</span><br><span class="line">plt.ylim(<span class="number">30000</span>,<span class="number">80000</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2007-16年城镇全部就业人员散点图&#x27;</span>)</span><br><span class="line"><span class="comment">#添加图例</span></span><br><span class="line">plt.legend(&#123;<span class="string">&#x27;全部就业&#x27;</span>,<span class="string">&#x27;城镇就业&#x27;</span>,<span class="string">&#x27;乡村就业&#x27;</span>&#125;)</span><br><span class="line">plt.savefig(<span class="string">&#x27;d:/test/emp1.png&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="（六）折线图和柱状图"><a href="#（六）折线图和柱状图" class="headerlink" title="（六）折线图和柱状图"></a>（六）折线图和柱状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Emp_data = np.loadtxt(<span class="string">&#x27;Employedpopulation.csv&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>,usecols=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>),dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置正常显示中文和负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个绘图对象,并设置宽高</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># #折线,全部就业人员</span></span><br><span class="line"><span class="comment"># plt.plot(Emp_data[0],Emp_data[1],&quot;r-&quot;)</span></span><br><span class="line"><span class="comment"># #折线,城镇就业人员</span></span><br><span class="line"><span class="comment"># plt.plot(Emp_data[0],Emp_data[2],&quot;g--&quot;)</span></span><br><span class="line"><span class="comment"># #折线,乡村就业人员</span></span><br><span class="line"><span class="comment"># plt.plot(Emp_data[0],Emp_data[3],&quot;b-.&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #设置轴和标题</span></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;年份&#x27;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27;人员(万人)&#x27;)</span></span><br><span class="line"><span class="comment"># plt.xlim(2007,2016)</span></span><br><span class="line"><span class="comment"># plt.ylim(30000,80000)</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;2007-16年城镇全部就业人员散点图&#x27;)</span></span><br><span class="line"><span class="comment"># #添加图例</span></span><br><span class="line"><span class="comment"># plt.legend(&#123;&#x27;全部就业&#x27;,&#x27;城镇就业&#x27;,&#x27;乡村就业&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># plt.savefig(&#x27;d:/test/emp2.png&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #随机生成10000个满足正态分布的数据</span></span><br><span class="line"><span class="comment"># data = np.random.randn(10000)</span></span><br><span class="line"><span class="comment"># plt.hist(data,bins=40,color=&quot;red&quot;,edgecolor=&quot;black&quot;,rwidth=0.7,alpha=0.7)</span></span><br><span class="line"><span class="comment"># #横纵轴</span></span><br><span class="line"><span class="comment"># plt.xlabel(&quot;区间&quot;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&quot;频数/频率&quot;)</span></span><br><span class="line"><span class="comment"># plt.title(&quot;频数/频率分布直方图&quot;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #柱状图,全部就业人员</span></span><br><span class="line"><span class="comment"># plt.bar(Emp_data[0],Emp_data[1],width=0.35,color=&#x27;red&#x27;,edgecolor=&#x27;white&#x27;)</span></span><br><span class="line"><span class="comment"># #折线,城镇就业人员</span></span><br><span class="line"><span class="comment"># plt.bar(Emp_data[0],Emp_data[2],width=0.35,color=&#x27;green&#x27;,edgecolor=&#x27;white&#x27;)</span></span><br><span class="line"><span class="comment"># #折线,乡村就业人员</span></span><br><span class="line"><span class="comment"># plt.bar(Emp_data[0],Emp_data[3],width=0.35,color=&#x27;blue&#x27;,edgecolor=&#x27;white&#x27;)</span></span><br><span class="line"><span class="comment">#设置轴和标题</span></span><br><span class="line"><span class="comment"># plt.xlabel(&#x27;年份&#x27;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27;人员(万人)&#x27;)</span></span><br><span class="line"><span class="comment"># plt.xlim(2007,2016)</span></span><br><span class="line"><span class="comment"># plt.ylim(30000,80000)</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;2007-16年城镇全部就业人员柱状图&#x27;)</span></span><br><span class="line"><span class="comment"># #添加图例</span></span><br><span class="line"><span class="comment"># plt.legend(&#123;&#x27;全部就业&#x27;,&#x27;城镇就业&#x27;,&#x27;乡村就业&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># # plt.savefig(&#x27;d:/test/emp2.png&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><h3 id="（七）饼图"><a href="#（七）饼图" class="headerlink" title="（七）饼图"></a>（七）饼图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Emp_data = np.loadtxt(<span class="string">&#x27;Employedpopulation.csv&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>,usecols=(<span class="number">1</span>),dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置正常显示中文和负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个绘图对象,并设置宽高</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#饼型图,全部就业人员</span></span><br><span class="line">X = [Emp_data[<span class="number">2</span>],Emp_data[<span class="number">3</span>]] <span class="comment">#将2016年就业数据赋值给X</span></span><br><span class="line">label = [<span class="string">&#x27;城镇就业&#x27;</span>,<span class="string">&#x27;乡村就业&#x27;</span>] <span class="comment">#饼图标签</span></span><br><span class="line">explode = [<span class="number">0.01</span>,<span class="number">0.01</span>] <span class="comment">#设定各项距离圆心的半径</span></span><br><span class="line"></span><br><span class="line">plt.pie(X,explode=explode,labels=label,autopct=<span class="string">&#x27;%1.2f%%&#x27;</span>)</span><br><span class="line"><span class="comment">#添加图例</span></span><br><span class="line">plt.legend(&#123;<span class="string">&#x27;城镇就业&#x27;</span>,<span class="string">&#x27;乡村就业&#x27;</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="（八）箱图"><a href="#（八）箱图" class="headerlink" title="（八）箱图"></a>（八）箱图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Emp_data = np.loadtxt(<span class="string">&#x27;Employedpopulation.csv&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>,usecols=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>),dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置正常显示中文和负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个绘图对象,并设置宽高</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#箱图,全部就业人员</span></span><br><span class="line">X = [Emp_data[<span class="number">1</span>],Emp_data[<span class="number">2</span>],Emp_data[<span class="number">3</span>]] <span class="comment">#将2007-2016年就业数据赋值给X</span></span><br><span class="line">label = [<span class="string">&#x27;全国就业&#x27;</span>,<span class="string">&#x27;城镇就业&#x27;</span>,<span class="string">&#x27;乡村就业&#x27;</span>] <span class="comment">#饼图标签</span></span><br><span class="line">explode = [<span class="number">0.01</span>,<span class="number">0.01</span>] <span class="comment">#设定各项距离圆心的半径</span></span><br><span class="line"></span><br><span class="line">plt.boxplot(X,notch=<span class="literal">True</span>,labels=label,meanline=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#添加图例</span></span><br><span class="line">plt.legend(&#123;<span class="string">&#x27;全国就业&#x27;</span>,<span class="string">&#x27;城镇就业&#x27;</span>,<span class="string">&#x27;乡村就业&#x27;</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用Numpy进行简单统计</title>
      <link href="/esblog/64712.html"/>
      <url>/esblog/64712.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-numpy读取数据"><a href="#一-numpy读取数据" class="headerlink" title="一.numpy读取数据"></a>一.numpy读取数据</h2><h3 id="一-使用NumPy读写文本文件"><a href="#一-使用NumPy读写文本文件" class="headerlink" title="(一) 使用NumPy读写文本文件"></a>(一) 使用NumPy读写文本文件</h3><h4 id="1-将1维或2维数组写入TXT文件或CSV格式文件"><a href="#1-将1维或2维数组写入TXT文件或CSV格式文件" class="headerlink" title="1.将1维或2维数组写入TXT文件或CSV格式文件"></a>1.将1维或2维数组写入TXT文件或CSV格式文件</h4><p>​(1) 写入后缀名为txt或csv的文件</p><p>​(2) 语法: numpy.savetxt(fname,array,fmt&#x3D;’%.18e’,delimiter&#x3D;None,newline&#x3D;’\n’, header&#x3D;’’, footer&#x3D;’’, comments&#x3D;’# ‘, encoding&#x3D;None)</p><table><thead><tr><th>参数</th><th align="left">解释</th></tr></thead><tbody><tr><td>fname</td><td align="left">文件、字符串或产生器，可以是.gz或bz2压缩文件</td></tr><tr><td>array</td><td align="left">存入文件的数组（一维数组或者二维数组）</td></tr><tr><td>fmt</td><td align="left">写入文件的格式，如：%d，%.2f，%.18e，默认值是%.18e</td></tr><tr><td>delimiter</td><td align="left">分隔字符串，默认是任何空格,改为逗号</td></tr><tr><td>newline</td><td align="left">值可以\n,换行</td></tr><tr><td>header</td><td align="left">头部加入注释</td></tr><tr><td>footer</td><td align="left">xxxxxxxxxx Emp_data &#x3D; np.loadtxt(‘Employedpopulation.csv’,delimiter&#x3D;”,”,usecols&#x3D;(1,2,3,4,5,6,7,8,9,10),dtype&#x3D;int)​#设置正常显示中文和负号plt.rcParams[‘font.sans-serif’] &#x3D; [‘SimHei’]plt.rcParams[‘axes.unicode_minus’] &#x3D; False​#创建一个绘图对象,并设置宽高plt.figure(figsize&#x3D;(6,4))​#箱图,全部就业人员X &#x3D; [Emp_data[1],Emp_data[2],Emp_data[3]] #将2007-2016年就业数据赋值给Xlabel &#x3D; [‘全国就业’,’城镇就业’,’乡村就业’] #饼图标签explode &#x3D; [0.01,0.01] #设定各项距离圆心的半径​plt.boxplot(X,notch&#x3D;True,labels&#x3D;label,meanline&#x3D;True)#添加图例plt.legend({‘全国就业’,’城镇就业’,’乡村就业’})plt.show()python</td></tr><tr><td>comments</td><td align="left">注释</td></tr><tr><td>encoding</td><td align="left">编码</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存txt文件</span></span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#写入txt文件保存当前目录, 分隔符默认空格,  浮点型</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;t1.txt&#x27;</span>,arr)</span><br><span class="line"><span class="comment">#写入int类型, 逗号分隔</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;t2.txt&#x27;</span>,arr,fmt=<span class="string">&quot;%d&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#写入字符串类型, 收尾加注释</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;t3.txt&#x27;</span>,arr,fmt=<span class="string">&quot;%s&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>,header=<span class="string">&quot;t3&quot;</span>,footer=<span class="string">&quot;t3&quot;</span>)</span><br><span class="line"><span class="comment">#写入字符串类型, 头部加注释   ##t4注释</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;t4.txt&#x27;</span>,arr,fmt=<span class="string">&quot;%s&quot;</span>,delimiter=<span class="string">&quot;,&quot;</span>,header=<span class="string">&quot;t4&quot;</span>,comments=<span class="string">&quot;##&quot;</span>)</span><br><span class="line"><span class="comment">#写入csv文件保存当前目录</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;c.csv&#x27;</span>,arr)</span><br></pre></td></tr></table></figure><h4 id="2-读取TXT文件和CSV格式文件"><a href="#2-读取TXT文件和CSV格式文件" class="headerlink" title="2.读取TXT文件和CSV格式文件"></a>2.读取TXT文件和CSV格式文件</h4><p>读取TXT文件和CSV格式文件的函数是loadtxt().</p><p>(1) CSV: Comma-Separated Value, 逗号分隔值文件</p><p>​显示:表格状态</p><p>​源文件:换行和逗号分隔行列的格式化文本,每一行的数据表示一条记录</p><p>​由于csv便于展示,读取和写入,所以很多地方也是用csv的格式存储和传输中小型的数据,.</p><p>​(2) 语法: np.loadtxt(fname.dtype&#x3D;np.float,delimiter&#x3D;None,skiprows&#x3D;O,usecols&#x3D;None ,unpack&#x3D;False</p><table><thead><tr><th>参数</th><th align="left">解释</th></tr></thead><tbody><tr><td>fname</td><td align="left">文件、字符串或产生器，可以是.gz或bz2压缩文件</td></tr><tr><td>dtype</td><td align="left">数据类型，可选,CSV的字符串以什么数据类型读入数组中，默认np.float</td></tr><tr><td>delimiter</td><td align="left">分隔字符串，默认是任何空格,改为逗号</td></tr><tr><td>skiprows</td><td align="left">跳过前x行，一般跳过第一行表头</td></tr><tr><td>usecols</td><td align="left">读取指定的列,索引,元组类型 (1,2)</td></tr><tr><td>unpack</td><td align="left">如果True,读入属性将分别写入不同数组变量,False 读入数据只写入一个数组变量,默认False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取t1.txt文件</span></span><br><span class="line">l1 = np.loadtxt(<span class="string">&#x27;t1.txt&#x27;</span>)</span><br><span class="line"><span class="comment">#读取t2文件</span></span><br><span class="line">l2 = np.loadtxt(<span class="string">&#x27;t2.txt&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#读取t3  后的数组为int8类型</span></span><br><span class="line">l3 = np.loadtxt(<span class="string">&#x27;t3.txt&#x27;</span>,dtype=np.int8,delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#读取t4</span></span><br><span class="line">l4 = np.loadtxt(<span class="string">&#x27;t4.txt&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#读取csv</span></span><br><span class="line">c = np.loadtxt(<span class="string">&#x27;c.csv&#x27;</span>,delimiter=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>​3.案例: csv数据源</p><p>数据源为一个英国和美国各自youtube1000多个视频的点击,喜欢,不喜欢,评论数([“views”,”likes” ,”dislikes”,”comment total”)的csv.</p><p>​4.读取数据</p><p>​np.loadtxt(US_video data numbers path,delimiter&#x3D;”,”,dtype&#x3D;int,unpack&#x3D;1)<br>​注意其中添加delimiter和dtype以及unpack的效果<br>​delimiter:指定边界符号是什么,不指定会导致每行数据为一个整体的字符串而报错dtype:郡认人情况下对于较大的数据会将其变为科学计数的方式<br>​upack:默认是Flase(O),默认情况下有多少条数据.就会有多少行为True(1)的情况下,每一列的数据会组成一行,原始数据有多少列,加载出来的数据就会有多少行,相当于转置的效果<br>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取csv文件</span></span><br><span class="line">uk_path = <span class="string">&quot;data/US.csv&quot;</span></span><br><span class="line">u1 = np.loadtxt(uk_path,delimiter=<span class="string">&quot;,&quot;</span>,dtype=<span class="string">&quot;int&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="二-使用NumPy读写二进制格式文件"><a href="#二-使用NumPy读写二进制格式文件" class="headerlink" title="(二) 使用NumPy读写二进制格式文件"></a>(二) 使用NumPy读写二进制格式文件</h3><h4 id="1-使用save-或savez-函数写二进制格式文件"><a href="#1-使用save-或savez-函数写二进制格式文件" class="headerlink" title="1.使用save()或savez()函数写二进制格式文件"></a>1.使用save()或savez()函数写二进制格式文件</h4><p>语法:numpy.save(file,array) 或 numpy.savez(file,array)</p><p>参数说明:file：文件，以.npy为扩展名，压缩扩展名为.npz。 </p><pre><code>         array：数组变量。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用save()或savez()函数写二进制格式文件 numpy.save(file,array) 或 numpy.savez(file,array)</span></span><br><span class="line">np.save(<span class="string">&#x27;n1.npy&#x27;</span>,arr) <span class="comment">#以.npy为扩展名，</span></span><br><span class="line">np.savez(<span class="string">&#x27;n1.npz&#x27;</span>,arr) <span class="comment">#压缩扩展名为.npz</span></span><br></pre></td></tr></table></figure><h4 id="2-使用load-函数读取二进制格式文件"><a href="#2-使用load-函数读取二进制格式文件" class="headerlink" title="2.使用load()函数读取二进制格式文件"></a>2.使用load()函数读取二进制格式文件</h4><p>语法:numpy.load(file)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用load()函数读取二进制格式文件 numpy.load(file)</span></span><br><span class="line">n1 = np.load(<span class="string">&#x27;n1.npy&#x27;</span>)</span><br><span class="line">n2 = np.load(<span class="string">&#x27;n1.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br></pre></td></tr></table></figure><h3 id="三-使用NumPy读写多维数据文件"><a href="#三-使用NumPy读写多维数据文件" class="headerlink" title="(三) 使用NumPy读写多维数据文件"></a>(三) 使用NumPy读写多维数据文件</h3><h4 id="1-使用tofile-函数写入多维数据文件"><a href="#1-使用tofile-函数写入多维数据文件" class="headerlink" title="1.使用tofile()函数写入多维数据文件"></a>1.使用tofile()函数写入多维数据文件</h4><p>​语法: 数组名.tofile(fid, sep&#x3D;’’, format&#x3D;’%s’)</p><p>​参数说明：fid：文件、字符串，sep：数据分割符，format：写入数据的格式 。</p><h4 id="2-使用fromfile-函数读取多维数据文件"><a href="#2-使用fromfile-函数读取多维数据文件" class="headerlink" title="2.使用fromfile()函数读取多维数据文件"></a>2.使用fromfile()函数读取多维数据文件</h4><p>​语法:numpy.fromfile(fid,dtype&#x3D;float,count&#x3D;‐1,sep&#x3D;’’)</p><p>​参数说明：fid：文件、字符串，dtype：读取的数据类型。count：读入元素个数，‐1表示读入整个文件，sep：数据分割符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用tofile()函数写入和fromfile()读取多维数据文件</span></span><br><span class="line">a = np.arange(<span class="number">30</span>).reshape(<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># a.tofile(&#x27;a.dat&#x27;,sep=&#x27;,&#x27;,format=&#x27;%d&#x27;)</span></span><br><span class="line">a1 = np.fromfile(<span class="string">&#x27;a.dat&#x27;</span>, dtype=np.int8, sep=<span class="string">&#x27;,&#x27;</span>).reshape((<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br></pre></td></tr></table></figure><h2 id="二-常用的统计函数"><a href="#二-常用的统计函数" class="headerlink" title="二.常用的统计函数"></a>二.常用的统计函数</h2><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">sum</td><td align="left">对数组中全部或某轴向的元素求和，零长度的数组的sum为0</td></tr><tr><td align="left">mean</td><td align="left">算数平均数，零长度的数组的mean为NaN</td></tr><tr><td align="left">std、var</td><td align="left">标准差和方差，自由度可调（默认为n）</td></tr><tr><td align="left">min、max</td><td align="left">最小值和最大值</td></tr><tr><td align="left">argmin、argmax</td><td align="left">分别为最小和最大元素的索引</td></tr><tr><td align="left">cumsum</td><td align="left">所有元素的累计和</td></tr><tr><td align="left">cumprod</td><td align="left">所有元素的累计积</td></tr></tbody></table><h3 id="一-求最大值和最小值的函数"><a href="#一-求最大值和最小值的函数" class="headerlink" title="(一) 求最大值和最小值的函数"></a>(一) 求最大值和最小值的函数</h3><p>求数组最大值的函数是amax()和nanmax()，求数组最小值函数是amin()和nanmin().相对于max和min函数,大型数组使用amax()和amin()性能会更好.</p><p>amax语法: numpy.amax(a , [axis &#x3D; None[, out&#x3D;None[, keepdims&#x3D;False]]] )</p><p>参数说明: a:输入数据 , axis:指定沿着某个轴计算最大值(axis&#x3D;0按列,axis&#x3D;1按行,默认值None表示对整个数组)</p><p>​ out:替代输出数组.用于放置结果,默认值为None. </p><p>​ keepdims:默认值False, 输出行维度为1, 如果设置True, 则输出列维度为1.</p><p>​ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(一) 求最大值和最小值的函数</span></span><br><span class="line">a1 = np.array([ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">9</span>] ])</span><br><span class="line"><span class="comment">#最大值</span></span><br><span class="line">m1 = np.amax(a1)</span><br><span class="line"><span class="comment">#垂直方向最大值</span></span><br><span class="line">m2 = np.amax(a1,axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#水平方向最大值</span></span><br><span class="line">m3 = np.amax(a1,axis=<span class="number">1</span>) <span class="comment">#效率更高</span></span><br><span class="line">m4 = np.<span class="built_in">max</span>(a1,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#nanmin函数求最小值</span></span><br><span class="line">a2 = np.arange(<span class="number">3</span>,dtype=<span class="built_in">float</span>)</span><br><span class="line">a2[<span class="number">1</span>] = np.nan</span><br><span class="line"><span class="built_in">min</span> = np.nanmin(a2)<span class="comment">#nanmin最小值是0.0,这是区别</span></span><br><span class="line">min1 = np.amin(a2)<span class="comment">#amin最小值是nan</span></span><br></pre></td></tr></table></figure><h3 id="二-求沿轴方向的取值范围"><a href="#二-求沿轴方向的取值范围" class="headerlink" title="(二) 求沿轴方向的取值范围"></a>(二) 求沿轴方向的取值范围</h3><p>沿某轴axis方向上的最大值-最小区差值，即maximum-minimum的值形成的数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.  求沿轴方向的取值范围</span></span><br><span class="line">arr1 = np.array([[ <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] , [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">p1 = np.ptp(arr1,axis=<span class="number">0</span>) <span class="comment">#按垂直方向取值范围</span></span><br><span class="line">p2 = np.ptp(arr1,axis=<span class="number">1</span>) <span class="comment">#按水平方向取值范围</span></span><br><span class="line"><span class="built_in">print</span>(p2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原数组</span></span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line"><span class="comment">#按垂直方向取值范围效果</span></span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">#按水平方向取值范围效果</span></span><br><span class="line">[<span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="三-求百分位数"><a href="#三-求百分位数" class="headerlink" title="(三)求百分位数"></a>(三)求百分位数</h3><p>使用percentile()和nanpercentile()函数可以沿某轴axis方向计算数组中第q数值的百分位数</p><p>语法:numpy.percentile(a,q,axis&#x3D;None,out&#x3D;None,overwrite_input&#x3D;False,interpolation&#x3D;‘liner’,keepdims&#x3D;False)</p><p>参数说明:- a:array，用来计算分位数的对象，可以是多维数组 </p><p>​q:介于0-100的float，用来计算是几分位的参数，如四分之一位就是25,如果要计算两个位置的数就是[25,75] </p><p>​axis:坐标轴方向，一维的不需要考虑这个参数，多维的用这个调整计算的维度方向，取值范围0&#x2F;1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.  求百分位数 在NumPy中，使用percentile()和nanpercentile()</span></span><br><span class="line">r = np.random.randint(<span class="number">1</span>, <span class="number">20</span>, [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># print(np.percentile(r,[25,50]))#四分之一位</span></span><br><span class="line"><span class="comment"># print(np.percentile(r,50))#相当于 中位数</span></span><br><span class="line"><span class="comment"># print(np.percentile(r,50,axis=0))#相当于 中位数 0轴</span></span><br><span class="line"><span class="built_in">print</span>(np.percentile(r,<span class="number">50</span>,axis=<span class="number">1</span>))<span class="comment">#相当于 中位数 1轴</span></span><br></pre></td></tr></table></figure><p>运行效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原数组</span></span><br><span class="line">[[<span class="number">13</span> <span class="number">10</span>  <span class="number">4</span>  <span class="number">7</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span>  <span class="number">2</span>  <span class="number">1</span> <span class="number">12</span>]</span><br><span class="line"> [<span class="number">14</span> <span class="number">17</span> <span class="number">14</span> <span class="number">11</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">13</span> <span class="number">11</span>  <span class="number">2</span> <span class="number">11</span> <span class="number">11</span>]]</span><br><span class="line"><span class="comment">#四分之一位</span></span><br><span class="line">[<span class="number">6.</span> <span class="number">9.</span>]</span><br><span class="line"><span class="comment">#相当于 中位数</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"> <span class="comment">#0轴结果</span></span><br><span class="line">[<span class="number">11.</span>  <span class="number">10.</span>  <span class="number">11.5</span> <span class="number">16.5</span>  <span class="number">6.5</span>]</span><br><span class="line"> <span class="comment">#1轴结果</span></span><br><span class="line">[ <span class="number">9.</span> <span class="number">12.</span> <span class="number">14.</span> <span class="number">11.</span>]</span><br></pre></td></tr></table></figure><h3 id="四-求中位数"><a href="#四-求中位数" class="headerlink" title="(四)求中位数"></a>(四)求中位数</h3><p>median()和nanmean()函数可以沿某轴axis方向计算数组中的中位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用median函数求中位数</span></span><br><span class="line"><span class="comment"># print(np.median(r))</span></span><br><span class="line"><span class="built_in">print</span>(np.median(r,axis=<span class="number">0</span>)) <span class="comment">#按垂直方向</span></span><br><span class="line"><span class="built_in">print</span>(np.median(r,axis=<span class="number">1</span>)) <span class="comment">#按水平方向</span></span><br></pre></td></tr></table></figure><h3 id="五-求和与加权平均值"><a href="#五-求和与加权平均值" class="headerlink" title="(五)求和与加权平均值"></a>(五)求和与加权平均值</h3><p>sum()函数是沿某轴axis方向计算数组中相关元素之和，</p><p>average()函数是沿某轴axis方向计算数组中相关元素的加权平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a3 = np.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#求和与加权平均值</span></span><br><span class="line"><span class="comment">#求和</span></span><br><span class="line">sum1 = np.<span class="built_in">sum</span>(a3) <span class="comment">#结果21</span></span><br><span class="line">sum2 = np.<span class="built_in">sum</span>(a3,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[5 7 9]</span></span><br><span class="line">sum3 = np.<span class="built_in">sum</span>(a3,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[ 6 15]</span></span><br><span class="line"><span class="comment">#权重值  计算权重值为1时的加权平均值</span></span><br><span class="line">arr1 = np.average(a3) <span class="comment">#结果3.5</span></span><br><span class="line">arr2 = np.average(a3,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[2.5 3.5 4.5]</span></span><br><span class="line">arr3 = np.average(a3,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[2. 5.]</span></span><br></pre></td></tr></table></figure><h3 id="六-算术平均数"><a href="#六-算术平均数" class="headerlink" title="(六)算术平均数"></a>(六)算术平均数</h3><p>算术平均数是所有元素的总和除以元素的数量</p><p>mean()和nanmean()函数可以计算数组或者轴方向的算术平均数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#算数平均数</span></span><br><span class="line">arr1 = np.mean(a3)<span class="comment">#结果3.5</span></span><br><span class="line">arr2 = np.mean(a3,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[2.5 3.5 4.5]</span></span><br><span class="line">arr3 = np.mean(a3,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[2. 5.]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="七-标准差"><a href="#七-标准差" class="headerlink" title="(七)标准差"></a>(七)标准差</h3><p>标准差定义是总体各单位标准值与其平均数离差平方的算术平均数的平方根</p><p>作用:反映组内个体间的离散程度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标准差</span></span><br><span class="line">arr1 = np.std(a3) <span class="comment">#结果1.707825127659933</span></span><br><span class="line">arr2 = np.std(a3,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[1.5 1.5 1.5]</span></span><br><span class="line">arr3 = np.std(a3,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[0.81649658 0.81649658]</span></span><br></pre></td></tr></table></figure><h3 id="八-方差"><a href="#八-方差" class="headerlink" title="(八)方差"></a>(八)方差</h3><p>  方差是元素与元素的平均数差的平方的平均数mean(abs(x - x.mean())**2)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方差</span></span><br><span class="line">arr1 = np.var(a3) <span class="comment">#结果2.9166666666666665</span></span><br><span class="line">arr2 = np.var(a3,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[2.25 2.25 2.25]</span></span><br><span class="line">arr3 = np.var(a3,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[0.66666667 0.66666667]</span></span><br></pre></td></tr></table></figure><h2 id="三-NumPy-的排序函数"><a href="#三-NumPy-的排序函数" class="headerlink" title="三.NumPy 的排序函数"></a>三.NumPy 的排序函数</h2><p>NumPy的排序方式主要分为直接排序和间接排序两种</p><h3 id="一-sort-函数"><a href="#一-sort-函数" class="headerlink" title="(一) sort()函数"></a>(一) sort()函数</h3><p>sort()函数作用是返回输入数组的排序副本</p><p>语法:sort(数组，轴，排序种类，排序字段)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#排序</span></span><br><span class="line">a4 = np.array([[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]])</span><br><span class="line">arr1 = np.sort(a4) <span class="comment">#结果[[1 2 5] [3 4 6]]</span></span><br><span class="line">arr2 = np.sort(a4,axis=<span class="number">0</span>)<span class="comment">#按垂直方向,结果[[2 1 4]  [3 6 5]]</span></span><br><span class="line">arr3 = np.sort(a4,axis=<span class="number">1</span>)<span class="comment">#按水平方向,结果[[1 2 5]  [3 4 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置排序字段</span></span><br><span class="line">dt = np.dtype( [ (<span class="string">&#x27;name&#x27;</span>,<span class="built_in">str</span>,<span class="number">10</span>),(<span class="string">&#x27;age&#x27;</span>,<span class="built_in">int</span>)])</span><br><span class="line">arr = np.array([(<span class="string">&quot;liufei&quot;</span>, <span class="number">40</span>), (<span class="string">&quot;wangshidou&quot;</span>, <span class="number">18</span>), (<span class="string">&quot;fengzibo&quot;</span>, <span class="number">55</span>)],dtype=dt)</span><br><span class="line"><span class="comment"># print(np.sort(arr,order=&#x27;name&#x27;))</span></span><br></pre></td></tr></table></figure><h3 id="二-argsort-函数"><a href="#二-argsort-函数" class="headerlink" title="(二) argsort()函数"></a>(二) argsort()函数</h3><p>是对输入数组沿着给定轴执行间接排序，并根据指定排序类型返回数据的索引数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#argsort()函数  给定轴执行间接排序</span></span><br><span class="line">arr1 = np.argsort(a) <span class="comment">#返回索引数组</span></span><br></pre></td></tr></table></figure><h3 id="三-lexsort-函数"><a href="#三-lexsort-函数" class="headerlink" title="(三)lexsort()函数"></a>(三)lexsort()函数</h3><p>使用键序列执行间接排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lexsort()函数  使用键序列执行间接排序</span></span><br><span class="line">key = (<span class="string">&#x27;sno&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">value  = (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line">lexsort = np.lexsort((key, value))</span><br><span class="line"><span class="built_in">print</span>(lexsort) <span class="comment">#返回索引数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lexsort:</span><br><span class="line">    <span class="built_in">print</span>(key[i]+<span class="string">&quot;,&quot;</span>+value[i])  <span class="comment">#sno,1  age,18 name,22</span></span><br></pre></td></tr></table></figure><h2 id="四-NumPy-的去重与重复函数"><a href="#四-NumPy-的去重与重复函数" class="headerlink" title="四.NumPy 的去重与重复函数"></a>四.NumPy 的去重与重复函数</h2><h3 id="一-unique-函数"><a href="#一-unique-函数" class="headerlink" title="(一)unique()函数"></a>(一)unique()函数</h3><p>返回输入数组中所有不同的值（即去重后的值），并且按照从小到大的顺序排列</p><p>语法:unique(数组，index返回去重后索引数组，inverse获取重构原数组索引，count重复数量)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#NumPy 的去重与重复函数</span></span><br><span class="line"><span class="comment">#unique()函数  unique(数组，index返回去重后索引数组，inverse获取重构原数组索引，count重复数量)</span></span><br><span class="line">a2 = np.array([  [<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>] ])</span><br><span class="line">unique = np.unique(a2)</span><br><span class="line">unique2 = np.unique(a2,return_index=<span class="literal">True</span>) <span class="comment">#(array([1, 2, 4, 5, 6, 8]), array([3, 0, 5, 1, 6, 4], dtype=int64))</span></span><br><span class="line">unique3,index = np.unique(a2,return_inverse=<span class="literal">True</span>) <span class="comment">#[1 3 3 0 5 2 4 5]</span></span><br><span class="line">unique4 = np.unique(a2,return_counts=<span class="literal">True</span>)  <span class="comment">#(array([1, 2, 4, 5, 6, 8]), array([1, 1, 1, 2, 1, 2], dtype=int64))</span></span><br></pre></td></tr></table></figure><h3 id="二-tile-函数"><a href="#二-tile-函数" class="headerlink" title="(二)tile()函数"></a>(二)tile()函数</h3><p>将一个已有的数组重复一定的次数。</p><p>语法:tile(数组， 重复次数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tile()函数  tile(数组， 重复次数)</span></span><br><span class="line"><span class="built_in">print</span>(np.tile(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>))<span class="comment">#结果[ &#x27;a&#x27; ,&#x27;a&#x27;,&#x27;a&#x27;]</span></span><br><span class="line">a3 = np.array([  <span class="number">1</span>,<span class="number">2</span> ])</span><br><span class="line"><span class="built_in">print</span>(np.tile(a3,(<span class="number">3</span>,<span class="number">2</span>)))<span class="comment">#三行2列</span></span><br></pre></td></tr></table></figure><h3 id="三-repeat-函数"><a href="#三-repeat-函数" class="headerlink" title="(三)repeat()函数"></a>(三)repeat()函数</h3><p>指定需求重复的数组元素，沿着哪个轴进行重复多少次</p><p>语法:repeat(数组，重复次数，轴)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#repeat()    repeat(数组，重复次数，轴)</span></span><br><span class="line">a3 = np.array([  <span class="number">1</span>,<span class="number">2</span> ])</span><br><span class="line"><span class="built_in">print</span>(np.repeat(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>))  <span class="comment">#结果[ &#x27;a&#x27; ,&#x27;a&#x27;,&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(np.repeat(a3,<span class="number">3</span>)) <span class="comment">#每个元素重复三遍 结果:[ 1 1 1 2 2 2]</span></span><br><span class="line"><span class="built_in">print</span>(np.repeat(a3,(<span class="number">3</span>,<span class="number">2</span>))) <span class="comment">#第一个元素重复3次， 第二个元素重复2次 结果:[ 1 1 1 2 2]</span></span><br><span class="line">a4 = np.array([  [<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">6</span>] ])</span><br><span class="line">arr1 = np.repeat(a4, <span class="number">3</span>,axis=<span class="number">0</span>)   <span class="comment">#结果:[ [1,2],[1,2],[1,2], [4,6]  ,[4,6] ,[4,6] ]</span></span><br><span class="line">arr2 = np.repeat(a4, <span class="number">3</span>,axis=<span class="number">1</span>)<span class="comment">#结果:[[111222],[444666] ]</span></span><br></pre></td></tr></table></figure><h2 id="五-NumPy的搜索和计数函数"><a href="#五-NumPy的搜索和计数函数" class="headerlink" title="五.NumPy的搜索和计数函数"></a>五.NumPy的搜索和计数函数</h2><h3 id="一-argmin-、nanargmin-、argmax-函数"><a href="#一-argmin-、nanargmin-、argmax-函数" class="headerlink" title="(一)argmin()、nanargmin()、argmax()函数"></a>(一)argmin()、nanargmin()、argmax()函数</h3><p>argmin()和argmax()函数作用是沿指定轴返回最小和最大元素的索引。nanargmin()函数作用是沿指定轴返回忽略了NaN的最小值的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">argmax（）</span><br><span class="line">a4 = np.array([  [<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>] ])</span><br><span class="line"><span class="built_in">print</span>(np.argmax(a4))<span class="comment">#最大值索引 4</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(a4,axis=<span class="number">0</span>))<span class="comment">#最大值索引  [1 0 1 1]</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(a4,axis=<span class="number">1</span>))<span class="comment">#最大值索引  [1 0 ]</span></span><br></pre></td></tr></table></figure><h3 id="二-nonzero-函数"><a href="#二-nonzero-函数" class="headerlink" title="(二)nonzero()函数"></a>(二)nonzero()函数</h3><p>返回输入数组中非零元素的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nonzero() 非零索引数组</span></span><br><span class="line"><span class="built_in">print</span>(np.nonzero(a4))   <span class="comment">#结果[0,1,2,3],[0,1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="三-where-函数"><a href="#三-where-函数" class="headerlink" title="(三)where()函数"></a>(三)where()函数</h3><p>返回输入数组中满足给定条件x的元素的索引或者是当给定的条件x为True时，返回y数据，否则返回z数据。</p><p>语法:where(条件,满足条件返回,不满足条件的返回)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#where(条件)</span></span><br><span class="line">a5 = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span> ])</span><br><span class="line"><span class="built_in">print</span>(np.where(a5 &gt; <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="四-extract-函数"><a href="#四-extract-函数" class="headerlink" title="(四)extract()函数"></a>(四)extract()函数</h3><p>返回满足任何条件的元素。</p><p>语法:extract(表达式，数组)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#extract()  extract(表达式，数组)</span></span><br><span class="line">a5 = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span> ])</span><br><span class="line">e = np.mod(a5,<span class="number">2</span>) == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(np.extract(e,a5))</span><br></pre></td></tr></table></figure><h3 id="五-count-nonzero-计数函数"><a href="#五-count-nonzero-计数函数" class="headerlink" title="(五)count_nonzero()计数函数"></a>(五)count_nonzero()计数函数</h3><p>可以统计NumPy数组中非0元素的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#非零次数</span></span><br><span class="line"><span class="built_in">print</span>(np.count_nonzero(a5))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Numpy</title>
      <link href="/esblog/64775.html"/>
      <url>/esblog/64775.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-什么是numpy"><a href="#0-什么是numpy" class="headerlink" title="0.什么是numpy"></a>0.<strong>什么是numpy</strong></h2><ul><li><p>一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">多维数组</a>上执行数值运算</p><ol><li>快速</li><li>方便</li><li>科学计算的基础库</li></ol></li><li><p>安装numpy和scipy</p><ul><li><p>方式1:使用cmd中pip指令  cmd –&gt;pip list查看已安装的所有库</p></li><li><p>安装numpy:  pip install numpy&#x3D;&#x3D;版本      python3.7对应版本1.21.6    3.8    3.9    3.11 对应1.24</p><p>卸载: pip uninstall scipy  提示输入y</p><p>安装: 指定版本  pip install scipy &#x3D;&#x3D; 版本号</p><p>方式2: pycharm –&gt;设置 –&gt; 项目 :python interperter –&gt;点击+号: 搜索scipy–&gt;点击install按钮</p></li></ul></li></ul><h2 id="1-多维数组创建"><a href="#1-多维数组创建" class="headerlink" title="1.多维数组创建"></a>1.<strong>多维数组创建</strong></h2><h4 id="1-创建一维数组"><a href="#1-创建一维数组" class="headerlink" title="(1) 创建一维数组"></a>(1) 创建一维数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.__version__)</span><br></pre></td></tr></table></figure><ul><li><p>方式1:  np.array([1,2,3,4,5,6],dtype&#x3D;np.int64)   – 结果[1 2 3 4 5 6]  数组a</p></li><li><p>方式2:  np.array(range(1,6))                               – 结果[1 2 3 4 5]</p></li><li><p>方式3:  np.arange(1,6,1)                                     – 结果[1 2 3 4 5]</p></li><li><p>方式4:  np.array(list)    将一个列表或序列转化为数组</p></li><li><p>方式5:  np.adarray(a,b,c) 序列表达式直接产生一个数组 从a到b，步长为c。<br>np特有的，猜测是 b&#x3D; np.array(range(a,b，c)的简写</p></li></ul><h4 id="2-创建多维数组"><a href="#2-创建多维数组" class="headerlink" title="(2)创建多维数组"></a>(2)创建多维数组</h4><ul><li>二维数组 单个维度的元素数量要保持一致,数组的元素类型要保持一致(不一致则自动被转换为一致的),否则报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_list2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]]</span><br><span class="line">num_list3 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;a&quot;</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">&quot;b&quot;</span>]]</span><br><span class="line">array = np.array(num_list3)</span><br></pre></td></tr></table></figure><ul><li>三维数组(三维矩阵) : 列表维度和要创建的数组维度一致; 数据和维度如果是灵活的情况下创建复杂,</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_list4=[ [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;a&quot;</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">&quot;b&quot;</span>]] ,  [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;a&quot;</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">&quot;b&quot;</span>]] ]</span><br><span class="line">array2 = np.array(num_list4)</span><br></pre></td></tr></table></figure><ul><li>PS:<br>创建多维数组时可以</li><li>​    1、创建一个全0的数组: np.zeros((3,4))</li><li>​    2、创建一个全1的数组:np.ones((3,4))</li><li>​    3、创建一个对角线为1的正方形数组(方阵)：np.eye(3)</li><li>​    4、随机数创建数组，见下一部分 （6）numpy生成随机数</li></ul><h4 id="3-数组的属性"><a href="#3-数组的属性" class="headerlink" title="(3) 数组的属性"></a>(3) 数组的属性</h4><p>​a.ndim  #数组维度</p><p>​    a.shape)  #数组形状</p><p>​    a.itemsize  #数组每个元素大小</p><h2 id="2-常用数据类型"><a href="#2-常用数据类型" class="headerlink" title="2.常用数据类型"></a>2.常用数据类型</h2><h3 id="1-NumPy支持的数值类型"><a href="#1-NumPy支持的数值类型" class="headerlink" title="1. NumPy支持的数值类型"></a><strong>1. NumPy支持的数值类型</strong></h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>bool</td><td>True和Flase</td></tr><tr><td>inti</td><td>支持int的32或64位</td></tr><tr><td>int8</td><td>8位的整形(-128~127)</td></tr><tr><td>int16</td><td>-32768~32767</td></tr><tr><td>int32</td><td>-2 ** 31 ~ 2 ** 31 - 1</td></tr><tr><td>int64</td><td>-2 ** 63 ~ 2 ** 63 - 1</td></tr><tr><td>uint8</td><td>8位的整形(0~255)</td></tr><tr><td>uint16</td><td>-32768~32767</td></tr><tr><td>uint32</td><td>0 ~ 2 ** 32 - 1</td></tr><tr><td>uint64</td><td>0 ~ 2 ** 64 - 1</td></tr><tr><td>float16</td><td>1位符号位，5位指数位，10位</td></tr><tr><td>float32</td><td>1位符号位，8位指数位，23位</td></tr><tr><td>float64、float</td><td>1位符号位，11位指数位，52位</td></tr></tbody></table><p>另一种描述数据的类型的方式是用一个字符来描述使用的NumPy的数值数据的类型，例如’i’字符代表有符号整形数据，’f’代表浮点型数据，可以通过sctypeDict.keys()查看NumPy里支持的所有数据类型。</p><h3 id="2-查看多维数组的数据类型"><a href="#2-查看多维数组的数据类型" class="headerlink" title="2.查看多维数组的数据类型"></a>2.查看多维数组的数据类型</h3><p>​    arr1.dtype</p><p>​<strong>定义bool类型</strong></p><p>​    bs &#x3D; np.array([1, 1, 0, 1, 0], dtype&#x3D;bool)</p><h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><p>​    数组名.astype(numpy.数据类型),返回数组, 需要接收后才会改变</p><p>​    方法1: arr1&#x3D; arr1.astype(“i2”)  </p><p>​方法2: arr1&#x3D; arr1.astype(np.int8)           浮点和字符串需末尾加下滑线 (a &#x3D; a.astype(dtype&#x3D;np.float_))   或  np.s  _</p><p>​方法3: int8(34.5)   34.5转为8位整形，即1字节 </p><p>​bool(34.5)  34.5转为即为True或False</p><p>​<strong>小结: 对于每种类型都有同名的转换函数可以将数据转为某种数据类型的数据。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看多维数组的数据类型</span></span><br><span class="line">arr1.dtype</span><br><span class="line"></span><br><span class="line"><span class="comment">#numpy中的bool类型</span></span><br><span class="line">bs = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], dtype=<span class="built_in">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据类型 ,返回数组, 需要接收后才会改变</span></span><br><span class="line">arr1= arr1.astype(<span class="string">&quot;i2&quot;</span>)   或np.int8</span><br><span class="line"> </span><br><span class="line"><span class="comment">#特别的，修改小数的位数</span></span><br><span class="line">np.<span class="built_in">round</span>(arr1,<span class="number">2</span>) <span class="comment">#保留两位小数   python中也是如：round(random.random(),2) 随机产生一个0-1之间的小数，保留两位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#numpy中的小数类型  </span></span><br><span class="line"><span class="comment">#生成10个随机小数 ,保留两位小数  random.random()0~1之间的小数</span></span><br><span class="line">rs = np.array([random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="built_in">print</span>(rs.dtype)</span><br><span class="line">np_round = np.<span class="built_in">round</span>(rs, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(np_round)</span><br><span class="line"></span><br><span class="line">PS:</span><br><span class="line">    <span class="built_in">type</span>(数组)</span><br><span class="line"> </span><br><span class="line">    结果：</span><br><span class="line">    numpy.ndarray</span><br><span class="line">    <span class="built_in">type</span>(数组) numpy中多维数组的对象类型是 numpy.ndarray 即numpy多维数组   </span><br><span class="line">    数组.dtype 数据的数据类型</span><br></pre></td></tr></table></figure><h2 id="3-多维数组形状"><a href="#3-多维数组形状" class="headerlink" title="3.多维数组形状"></a>3.多维数组形状</h2><ol><li><p>查看数组的形状</p><p>语法:      a.shape</p></li><li><p>修改数组的形状</p><p>方法1:    a.reshape(5,2)     – 5是行, 2是列</p><p>方法2:    a.resize (3，4)    –表示将arr数组修改成3行4列数组，原数组a形状改变</p></li><li><p>输出 a.shape      问题: 为何修改后,仍然是原来的形状?使用b接收</p></li><li><p>把数组转为1维数组  </p><p>方法1:a.reshape(1,10)  </p><p>方法2:a.flatten()</p><p>方法3:a.reshape(a.shape[0] * a.shape[1], )</p><p>方法4: a.ravel()</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]])</span><br><span class="line">e = np.array([ [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]] ])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看多维数组形状</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="built_in">print</span>(e.shape)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#改变多维数组形状</span></span><br><span class="line">a.reshape(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line"> </span><br><span class="line">(<span class="number">10</span>,)      一维数组的shape 一个数</span><br><span class="line">(<span class="number">2</span>, <span class="number">5</span>)     二维数组的shape 二个数</span><br><span class="line">(<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>)  三维数组的shape 三个数，<span class="number">2</span> 块  <span class="number">5</span>行<span class="number">2</span>列的</span><br><span class="line">                                 <span class="number">0</span>轴（维）是<span class="number">5</span>, <span class="number">1</span>轴（维）是<span class="number">2</span>, <span class="number">2</span>轴（维）是<span class="number">2</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>注意：<br>   d.reshape reshape操作是有返回值的，需要有<strong>一个对象去接收改变后的多维数组</strong>。一般有返回值的操作都不改变原对象d。</p><p>PS:多维数组的轴（维度）</p><p>   在numpy中轴(axis)可以理解为方向,使用0,1,2…数字表示,</p><p>   对于一个一维数组,只有一个0轴, 对于2维数组(shape(2,2)),有0轴和1轴, 对于三维数组(shape(2,2, 3)),有0,1,2轴</p><h2 id="4-多维数组计算"><a href="#4-多维数组计算" class="headerlink" title="4.多维数组计算"></a>4.<strong>多维数组计算</strong></h2><p>​1. 数组与数字：          如 a+1,a-1,a*3,a&#x2F;2， “广播” - 将标量”广播”运算到到各个元素 <strong>(a &#x2F; 0不报错  nan 表示不是一个数字,  inf无限的)</strong></p><ol start="2"><li>数组与数组（同形状）：对应位置运算</li><li>数组与数组（不同形状）：只要在某一维度，如行或列相同，就在该维度计算，否则不能计算</li></ol><p>​例如二维数组:   2行5列    ,  一维数组可以是5列 , 或者二维数组  : 2行1列</p><p>​a1 &#x3D;np.array([[1,2,3,4,5],[6,7,8,9,10]])   </p><p>​a2 &#x3D; np.arange(5)  一维数组0,1,2,3,4一个维度一致</p><p>​a1+a2就可以进行计算</p><p>​a3 &#x3D; np.arange(2).reshape(2, 1)     a1+a3就可以进行计算</p><p>​<strong>这是一个numpy的广播机制造成的,在运算过程中,加减乘除的值被广播到所有的元素上.</strong></p><h2 id="5-广播原则"><a href="#5-广播原则" class="headerlink" title="5.广播原则"></a>5.广播原则</h2><ol><li>如果两个数组的后缘维度(trailing dimension ,即从末尾开始算起的维度) 的轴长度相符或其中一方的长度为1,则认为他们是广播兼容的.广播会在缺失和(或)长度为1的维度上进行.</li><li>原理: 可以把维度指shape所对应的数字个数.</li><li>shape为(3,3,3)的数组是否能够和(3,2)的数组进行计算? </li><li>shape为(3,3,2)的数组是否能够和(3,2)的数组进行计算? </li><li>广播优点: 例如每列的数据减去列的平均值的结果.</li></ol><h2 id="6-多维数组的轴（维度）"><a href="#6-多维数组的轴（维度）" class="headerlink" title="6.多维数组的轴（维度）"></a>6.多维数组的轴（维度）</h2><p>​在numpy中轴(axis)可以理解为方向,使用0,1,2…数字表示,</p><p>​对于一个一维数组,只有一个0轴, 对于2维数组(shape(2,2)),有0轴和1轴, 对于三维数组(shape(2,2, 3)),有0,1,2轴.</p><p>​二维数组 0轴横轴，1轴是纵轴.</p><p>​shape&#x3D;(2, 2, 5), 即：0轴&#x3D;2； 1轴&#x3D;2； 2轴&#x3D;5 ；即2块，2行，2列的多维数组 (见ppt的图)</p><h2 id="7-数组的索引和切片"><a href="#7-数组的索引和切片" class="headerlink" title="7.数组的索引和切片"></a>7.数组的索引和切片</h2><h3 id="1-一维数组的索引与切片"><a href="#1-一维数组的索引与切片" class="headerlink" title="(1)  一维数组的索引与切片"></a>(1)  <strong>一维数组的索引与切片</strong></h3><p>​1.获取指定元素    语法:数组名[索引（下标）]<strong>a[3]</strong></p><p>​2.数组的切片    语法:数组名[start  :   end :  step]<strong>a[2:10:2]</strong></p><h3 id="2-二维数组的索引与切片"><a href="#2-二维数组的索引与切片" class="headerlink" title="(2) 二维数组的索引与切片"></a>(2) <strong>二维数组的索引与切片</strong></h3><p>​1. 获取指定元素  语法:数组名[行索引,列索引]       <strong>a[1 ,  1]</strong></p><p>​2. 数组的切片    语法:数组名[rows_start:rows_end:rows_step，cols_start:cols_end:cols_step]    </p><p>​<strong>a[1 : 2 , 0: 1]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">取一行  a[<span class="number">1</span>]</span><br><span class="line">取多行  a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">取连续多行  a[<span class="number">2</span>:]</span><br><span class="line">取不连续多行 a[[<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">取一列  a[:,<span class="number">2</span>] 第<span class="number">3</span>列</span><br><span class="line">取多列 a[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>,:]) <span class="comment">#第2行所有列</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>: , :]) <span class="comment">#第2至结尾行所有列</span></span><br><span class="line"><span class="built_in">print</span>(a[[<span class="number">0</span>,<span class="number">2</span>],:]) <span class="comment">#第1和3行所有列</span></span><br><span class="line"><span class="built_in">print</span>(a[: , <span class="number">0</span>]) <span class="comment">#所有行的第1列</span></span><br><span class="line">取连续的多列 a[: , <span class="number">1</span>:]</span><br><span class="line">取不连续的多列 a[: , [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">取多行多列 第<span class="number">1</span>到<span class="number">2</span>,  第<span class="number">1</span>-<span class="number">2</span>列   <span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">列使用冒号?   a[[<span class="number">1</span>:<span class="number">3</span>],:]  超出范围,则最多取到最后一列  a[:, <span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">取多个不相邻的点 (选择的点是(<span class="number">1</span>,<span class="number">1</span>)  (<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">a[[<span class="number">1</span>,<span class="number">2</span>] , [<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-numpy中数值的修改"><a href="#3-numpy中数值的修改" class="headerlink" title="(3) numpy中数值的修改"></a>(3) numpy中数值的修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数值的修改</span></span><br><span class="line">a2[:, <span class="number">0</span>:<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br></pre></td></tr></table></figure><p>如果希望将小于10的数字替换为0?</p><h3 id="4-numpy中布尔索引"><a href="#4-numpy中布尔索引" class="headerlink" title="(4)numpy中布尔索引"></a>(4)numpy中布尔索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#小于10的替换为0</span></span><br><span class="line">a3 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="built_in">print</span>(a3&lt;<span class="number">10</span>)</span><br><span class="line">a3[a3&lt;<span class="number">10</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a3)</span><br><span class="line"><span class="comment">#小于10的替换为0, 大于10的换成10</span></span><br><span class="line">a4 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.where(a4&lt;<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>)) <span class="comment">#三元运算符</span></span><br><span class="line"><span class="comment">#特殊情况, nan类型,判断结果不相等</span></span><br><span class="line"><span class="built_in">print</span>(np.nan == np.nan)</span><br></pre></td></tr></table></figure><h2 id="8-numpy-转置和轴对换："><a href="#8-numpy-转置和轴对换：" class="headerlink" title="8.numpy 转置和轴对换："></a>8.numpy 转置和轴对换：</h2><p>​1.转置是一种变换,对于numpy中的数组来说,就是在对角线方向交换数据.目的也是未了更方便的去处理数据.</p><p>​2.方法1:   a.transpose()  行和列互换 ,原来的数组从2行3列,变为3行2列.</p><p>​3.方法2:   a.swapaxes(1,0)    交换轴</p><p>​4.方法3:   a.T</p><p>​5.方法4:   np rollaxis(arr,axis,start )函数 arr表示数组，axis表示要向后滚动的轴，其它轴的相对位置不会改变，start表示滚动到特定位置，默认为零，表示完整的滚动</p><p>​   转换和交换轴的效果一样.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> a 是二维数组</span><br><span class="line"></span><br><span class="line">         a.transpose()</span><br><span class="line"></span><br><span class="line">         a.swapaxes(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment"># 交换轴，也能实现转置</span></span><br><span class="line"></span><br><span class="line">         a.T</span><br><span class="line"></span><br><span class="line">以上三种方法都能实现转置</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="9-numpy常用方法"><a href="#9-numpy常用方法" class="headerlink" title="9.numpy常用方法"></a>9.<strong>numpy常用方法</strong></h2><h3 id="1-数组的连接"><a href="#1-数组的连接" class="headerlink" title="(1)数组的连接"></a>(1)数组的连接</h3><h4 id="1-concatenate连接NumPy数组"><a href="#1-concatenate连接NumPy数组" class="headerlink" title="1.concatenate连接NumPy数组"></a>1.concatenate连接NumPy数组</h4><p>​连接意味着将两个或多个数组的内容放在单个数组中。</p><p>xxxxxxxxxx #非零次数print(np.count_nonzero(a5))python</p><p>​我们传递了一系列要与轴一起加入concatenate()函数的数组。 如果未显式传递轴，则将其视为0。</p><p>​例如：</p><p>​连接两个数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">arr = np.concatenate((arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：[4 2 3 4 7 6]</p><p>例如：</p><p>沿行（axis&#x3D;1）联接两个二维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">7</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">arr = np.concatenate((arr1, arr2), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[1 7 5 9]</span><br><span class="line"> [3 4 2 8]]</span><br></pre></td></tr></table></figure><h4 id="2-使用stack-函数连接数组"><a href="#2-使用stack-函数连接数组" class="headerlink" title="2.使用stack()函数连接数组"></a>2.使用stack()函数连接数组</h4><p>stack()与concatenate()相同，唯一的不同是stack()是沿着新轴完成的。</p><p>我们可以沿着第二个轴连接两个一维数组，这将导致它们一个放在另一个之上。</p><p>我们传递一个要连接到stack()方法的数组序列和axis。如果axis没有显式传递，则将其视为0。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">arr = np.stack((arr1, arr2), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h4 id="3、使用hstack-通过行"><a href="#3、使用hstack-通过行" class="headerlink" title="3、使用hstack()通过行"></a>3、使用hstack()通过行</h4><p>NumPy提供了一个辅助函数：hstack()沿行堆叠。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">77</span>, <span class="number">31</span>])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">88</span>, <span class="number">61</span>])</span><br><span class="line"></span><br><span class="line">arr = np.hstack((arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">1</span> <span class="number">77</span> <span class="number">31</span>  <span class="number">4</span> <span class="number">88</span> <span class="number">61</span>]</span><br></pre></td></tr></table></figure><h4 id="4、使用vstack-通过列"><a href="#4、使用vstack-通过列" class="headerlink" title="4、使用vstack()通过列"></a>4、使用vstack()通过列</h4><p>NumPy提供了一个辅助函数：vstack()沿列堆叠。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">11</span>, <span class="number">12</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([<span class="number">41</span>, <span class="number">5</span>, <span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">arr = np.vstack((arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">11</span> <span class="number">12</span>  <span class="number">3</span>]</span><br><span class="line"> [<span class="number">41</span>  <span class="number">5</span> <span class="number">16</span>]]</span><br></pre></td></tr></table></figure><h4 id="5、使用dstack-通过Height-depth"><a href="#5、使用dstack-通过Height-depth" class="headerlink" title="5、使用dstack()通过Height (depth)"></a>5、使用dstack()通过Height (depth)</h4><p>NumPy提供了一个辅助函数：dstack()沿高度进行堆叠，该高度与深度相同。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">arr = np.dstack((arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>上面代码运行的成果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="number">1</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">2</span> <span class="number">5</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">6</span>]]]</span><br></pre></td></tr></table></figure><h3 id="2-数组的分割"><a href="#2-数组的分割" class="headerlink" title="(2)数组的分割"></a>(2)数组的分割</h3><h4 id="1-split-函数"><a href="#1-split-函数" class="headerlink" title="1. split()函数"></a>1. split()函数</h4><p>​沿特定的轴将数组分割为子数组</p><p>​语法: numpy.split(arr,indices_or_sections,axis)  </p><p>​ indices_or_sections表示将arr数组创建为大小相同的子数组的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对1维数组分割 按指定位置分割,2,5位置</span></span><br><span class="line">sp1 = np.array([  <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment"># print(np.split(sp1,[2,5]))</span></span><br><span class="line">sp2 = np.array([  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] , [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="comment">#将数组分割为2个大小相同的子数组</span></span><br><span class="line"><span class="built_in">print</span>(np.split(sp2, <span class="number">2</span>))</span><br><span class="line"><span class="comment">#3个2维数组  结果: [[1],[4]]    [[2],[5]]   [[3],[6]]</span></span><br><span class="line"><span class="built_in">print</span>(np.split(sp2, <span class="number">3</span> , <span class="number">1</span> ))</span><br></pre></td></tr></table></figure><h4 id="2-hsplit-函数"><a href="#2-hsplit-函数" class="headerlink" title="2.hsplit()函数"></a>2.hsplit()函数</h4><p>​将数组沿着水平方向分割</p><p>​语法:numpy.hsplit(arr,indices_or_sections)</p><h4 id="3-vsplit-函数"><a href="#3-vsplit-函数" class="headerlink" title="3.vsplit()函数"></a>3.vsplit()函数</h4><p>​将数组沿着竖直方向分割</p><p>​语法: numpy.vsplit(arr,indices_or_sections)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hsplit()函数  沿着水平方向分割 结果3个数组 [[1],[4]]    [[2],[5]]   [[3],[6]]</span></span><br><span class="line"><span class="built_in">print</span>(sp2)</span><br><span class="line"><span class="built_in">print</span>(np.hsplit(sp2,<span class="number">3</span>)) </span><br><span class="line"><span class="comment">#vsplit()函数  沿着垂直方向分割 结果2个数组 [[1, 2, 3]]   [[4, 5, 6]]</span></span><br><span class="line"><span class="built_in">print</span>(np.vsplit(sp2,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="3-数组转换"><a href="#3-数组转换" class="headerlink" title="(3)数组转换"></a>(3)数组转换</h3><p>​数组名.tolist()   将数组转换成列表</p><h3 id="4-添加删除数组元素"><a href="#4-添加删除数组元素" class="headerlink" title="(4)添加删除数组元素"></a>(4)添加删除数组元素</h3><h4 id="1-append-函数"><a href="#1-append-函数" class="headerlink" title="1.  append()函数"></a>1.  append()函数</h4><p>​数组的末尾添加元素，该函数会返回一个新数组，而原数组不变。  </p><p>​方法：numpy.append(arr,values,axis)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一维数组追加</span></span><br><span class="line">a = np.array([  <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment"># a = np.append(a,[0,0,0])</span></span><br><span class="line">a1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="comment">#二维数组追加二维数组</span></span><br><span class="line">a1 = np.append(a1,[[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="comment">#沿0轴添加  [[ 1  2  3]  [ 4  5  6]  [ 7  8  9] [10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.append(a1,[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]],axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#沿1轴添加  [[ 1  2  3  7  8  9]   [ 4  5  6 10 11 12]]</span></span><br><span class="line"><span class="built_in">print</span>(np.append(a1,[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]],axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#沿0轴添加运行结果</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line"> <span class="comment">#沿1轴添加运行结果</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br></pre></td></tr></table></figure><h4 id="2-insert-函数"><a href="#2-insert-函数" class="headerlink" title="2.insert()函数"></a>2.insert()函数</h4><p>​沿给定轴在输入数组中插入值,该函数会返回一个新数组，原数组不变。</p><p>​方法：numpy.insert(arr,obj,values,axis)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一维数组插入</span></span><br><span class="line"><span class="comment"># print(np.insert(a,2,[111,222]))</span></span><br><span class="line"><span class="comment">#二维数组插入 会被展开后插入</span></span><br><span class="line"><span class="built_in">print</span>(np.insert(a1,<span class="number">2</span>,[<span class="number">111</span>,<span class="number">222</span>]))</span><br><span class="line"><span class="comment">#加入axis=0, 则会以广播数组来匹配输入数组  插入值[0,0,0]</span></span><br><span class="line"><span class="built_in">print</span>(np.insert(a1,<span class="number">2</span>,[<span class="number">0</span>],axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#加入axis=1, 则会以广播数组来匹配输入数组  插入值[[0],[0]]</span></span><br><span class="line"><span class="built_in">print</span>(np.insert(a1,<span class="number">2</span>,[<span class="number">0</span>],axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二维数组插入 会被展开后插入运行结果</span></span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span> <span class="number">222</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>]</span><br><span class="line"><span class="comment">#加入axis=0运行结果</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line"><span class="comment">#加入axis=1运行结果</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h4 id="3-delete-函数"><a href="#3-delete-函数" class="headerlink" title="3.delete()函数"></a>3.delete()函数</h4><p>​从输入数组中删除指定子数组的新数组，原数组不变。</p><p>​方法：numpy.delete(arr,obj,axis)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delete()函数  删除前会被展开,删除指定索引的元素</span><br><span class="line">a2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.delete(a2,[<span class="number">2</span>,<span class="number">4</span>]))</span><br><span class="line"><span class="comment">#删除第3列 结果 [[1 2]  [4 5]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(a2,<span class="number">2</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment">#删除第1行  结果[[4 5 6]]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(a2,<span class="number">0</span>,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#删除切片范围  展开后切片  结果[4 5 6]</span></span><br><span class="line"><span class="built_in">print</span>(np.delete(a2, np.s_[<span class="number">0</span>:<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="10-通用函数"><a href="#10-通用函数" class="headerlink" title="10.通用函数"></a>10.通用函数</h2><h3 id="1-常见的一元函数"><a href="#1-常见的一元函数" class="headerlink" title="(1)常见的一元函数"></a>(1)常见的一元函数</h3><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">abs、fabs</td><td align="left">计算整数、浮点数或复数的绝对值。对于非复数值，可以使用更快的fabs</td></tr><tr><td align="left">sqrt</td><td align="left">计算各元素的平方根，相当于arr ** 0.5</td></tr><tr><td align="left">square</td><td align="left">计算个元素的平方，</td></tr><tr><td align="left">exp</td><td align="left">计算各元素的指数</td></tr><tr><td align="left">log、log10、log2、log1p</td><td align="left">分别计算自然对数（底数为e）、底数为10的对数、底数为2的对数、底数为1+x的对数</td></tr><tr><td align="left">sign</td><td align="left">计算各元素的正负号：1（整数）、0（零）、-1（负数）</td></tr><tr><td align="left">ceil</td><td align="left">计算各元素的ceiling值，即大于等于该值的最小整数</td></tr><tr><td align="left">floor</td><td align="left">计算各元素的floor值，即小于等于该值的最大整数</td></tr><tr><td align="left">rint</td><td align="left">将各元素的值四舍五入到最接近的整数，保留dtype</td></tr><tr><td align="left">modf</td><td align="left">将数组各元素的小数和整数部分以两个独立的数组的形式返回</td></tr><tr><td align="left">isnan</td><td align="left">返回一个表示“哪些值是NaN（Not a Number）”的布尔型数组</td></tr><tr><td align="left">isfinite、isinf</td><td align="left">分别返回一个表示“哪些元素是有穷的”或“哪些元素是无穷的”的布尔型数组</td></tr><tr><td align="left">cos、cosh、sin、sinh、tan、tanh</td><td align="left">普通型和双曲型三角函数</td></tr><tr><td align="left">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td><td align="left">普通型和双曲型反三角函数</td></tr><tr><td align="left">logical_not</td><td align="left">计算各元素not x的真值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通用函数</span></span><br><span class="line"><span class="comment">#常用一元函数</span></span><br><span class="line">arr = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"><span class="comment">#arr数组的平方根</span></span><br><span class="line">arr1 = np.sqrt(arr)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"><span class="comment">#每个数字+2</span></span><br><span class="line"><span class="comment"># print(np.add(arr,2))</span></span><br><span class="line"><span class="comment">#分解数组的浮点数为整数和小数部分</span></span><br><span class="line"><span class="comment"># print(np.modf(arr1))</span></span><br><span class="line"><span class="comment">#比较两个数组大小  结果[3 4 5]</span></span><br><span class="line">arr2 = np.arange(<span class="number">3</span>)</span><br><span class="line">arr3 = np.arange(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(np.maximum(arr2,arr3))</span><br><span class="line"><span class="comment">#计算矢量积和数量积</span></span><br><span class="line">arr4 = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">arr5 = np.arange(<span class="number">3</span>)</span><br><span class="line">arr6 = np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr4)</span><br><span class="line"><span class="built_in">print</span>(arr5)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矢量积&quot;</span>,np.dot(arr6,arr5))<span class="comment">#dot数组中对应元素相除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数量积&quot;</span>,arr4*arr5)</span><br></pre></td></tr></table></figure><h3 id="2-常见的二元函数"><a href="#2-常见的二元函数" class="headerlink" title="(2)常见的二元函数"></a>(2)常见的二元函数</h3><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">add</td><td align="left">将数组中对应的元素相加</td></tr><tr><td align="left">subtract</td><td align="left">第一个数组减去第二个数组</td></tr><tr><td align="left">multiply</td><td align="left">数组元素相乘</td></tr><tr><td align="left">divide、floor_divide</td><td align="left">除法、向下整除法（丢弃余数）</td></tr><tr><td align="left">power</td><td align="left">对第一个数组中的元素A，根据第二个数组中的元素B，计算</td></tr><tr><td align="left">maximum、fmax</td><td align="left">元素级的最大值计算，fmax将忽略NaN</td></tr><tr><td align="left">minimum、fmin</td><td align="left">元素级的最小值计算，fmin将忽略NaN</td></tr><tr><td align="left">mod</td><td align="left">元素级的取模计算</td></tr><tr><td align="left">copysign</td><td align="left">将第二个数组各元素值的符号复制给第一个数组中各元素</td></tr><tr><td align="left">greater、greater_equal、less、less_equal、equal、not_equal</td><td align="left">执行元素级的比较运算，最终产生布尔型数组</td></tr><tr><td align="left">logical_and、logical_or、logical_xor</td><td align="left">执行元素级真值逻辑运算</td></tr></tbody></table><h2 id="11-NumPy矩阵创建、计算及操作"><a href="#11-NumPy矩阵创建、计算及操作" class="headerlink" title="11. NumPy矩阵创建、计算及操作"></a>11. NumPy矩阵创建、计算及操作</h2><h3 id="1-矩阵的创建"><a href="#1-矩阵的创建" class="headerlink" title="1. 矩阵的创建"></a>1. 矩阵的创建</h3><p>​使用mat()、matrix()以及bmat()函数创建矩阵</p><h4 id="1-使用字符串创建矩阵"><a href="#1-使用字符串创建矩阵" class="headerlink" title="(1) 使用字符串创建矩阵"></a>(1) 使用字符串创建矩阵</h4><p>​字符串以空格分隔列</p><p>​语法:numpy.mat(‘1 2 3;4 5 6;7 8 9’)</p><h4 id="2-使用嵌套序列创建矩阵"><a href="#2-使用嵌套序列创建矩阵" class="headerlink" title="(2) 使用嵌套序列创建矩阵"></a>(2) 使用嵌套序列创建矩阵</h4><p>​语法:numpy.mat([[2,4,6,8],[1.0,3,5,7.0]])   浮点数</p><h4 id="3-使用一个数组创建矩阵"><a href="#3-使用一个数组创建矩阵" class="headerlink" title="(3) 使用一个数组创建矩阵"></a>(3) 使用一个数组创建矩阵</h4><p>​语法:numpy.mat(numpy.arange(9).reshape(3,3))</p><h4 id="4-使用matrix-函数创建矩阵"><a href="#4-使用matrix-函数创建矩阵" class="headerlink" title="(4) 使用matrix()函数创建矩阵"></a>(4) 使用matrix()函数创建矩阵</h4><p>​matrix()函数可以将字符串、嵌套序列、数组和matrix转换成矩阵。</p><p>​语法:matrix(data,dtype&#x3D;None,copy&#x3D;True)</p><h4 id="5-使用bmat-函数创建矩阵"><a href="#5-使用bmat-函数创建矩阵" class="headerlink" title="(5) 使用bmat()函数创建矩阵"></a>(5) 使用bmat()函数创建矩阵</h4><p>​小矩阵组合成大矩阵使用bmat分块</p><p>​语法:： bmat(obj,ldict&#x3D;None,gdict&#x3D;None)   obj为matrix。参数ldict和gdict为None</p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#NumPy矩阵创建</span></span><br><span class="line"><span class="comment"># （1） 使用字符串创建矩阵 numpy.mat(‘1 2 3;4 5 6;7 8 9’)</span></span><br><span class="line">m = np.mat(<span class="string">&#x27;1 2;3 4;5 6&#x27;</span>)</span><br><span class="line">m1 = np.mat([[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>], [<span class="number">1.0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7.0</span>]]) <span class="comment">#使用嵌套序列创建矩阵</span></span><br><span class="line">m2 = np.mat(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>))<span class="comment">#使用一个数组创建矩阵</span></span><br><span class="line">m3 = np.matrix(<span class="string">&#x27;1 2;3 4;5 6&#x27;</span>, dtype=np.int8,copy=<span class="literal">True</span>) <span class="comment">#使用matrix()函数创建矩阵</span></span><br><span class="line">m4 = np.mat(<span class="string">&#x27;1 1 1;2 2 2&#x27;</span>)</span><br><span class="line">m5 = np.mat(<span class="string">&#x27;3 3 3;4 4 4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.bmat(<span class="string">&#x27;m4 m5;m5 m4&#x27;</span>)) <span class="comment">#使用bmat()函数创建矩阵</span></span><br></pre></td></tr></table></figure><h3 id="2-矩阵的计算及操作"><a href="#2-矩阵的计算及操作" class="headerlink" title="2. 矩阵的计算及操作"></a>2. 矩阵的计算及操作</h3><p>​针对整个矩阵中的每个元素进行的，不需要使用for循环，而且运算效率更高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#矩阵计算</span></span><br><span class="line">m7 = np.mat([[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>], [<span class="number">1.0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7.0</span>]])</span><br><span class="line">m8 = np.mat(np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">m9 = np.mat(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">#不同形状会报错</span></span><br><span class="line"><span class="comment"># print(m7+m8)#相同形状可以运算:+ - /</span></span><br><span class="line"><span class="comment">#矩阵相乘 矢量积操作</span></span><br><span class="line"><span class="built_in">print</span>(m7,m8.T)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矢量积&quot;</span>,m7*m8.T)</span><br><span class="line"><span class="comment">#使用函数 multiply  计算数量积</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数量积&quot;</span>,np.multiply(m7,m8))</span><br><span class="line"><span class="comment">#矩阵操作  取矩阵的行数</span></span><br><span class="line"><span class="built_in">print</span>(m7.shape[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line">m7.sort()</span><br><span class="line"><span class="built_in">print</span>(m7)</span><br><span class="line"><span class="comment">#列表转np矩阵</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">np.mat(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h2 id="12-随机数生成"><a href="#12-随机数生成" class="headerlink" title="12. 随机数生成"></a>12. 随机数生成</h2><h3 id="1-使用rand-函数"><a href="#1-使用rand-函数" class="headerlink" title="1.使用rand()函数"></a>1.使用rand()函数</h3><p>​[0, 1)内均匀分布的随机数(不包括1)  若没有参数输入，则生成一个数</p><p>​语法:numpy.random.rand(d0, d1, …, dn)  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.   使用rand()函数numpy.random.rand(d0, d1, ..., dn)</span></span><br><span class="line">r = np.random.rand() <span class="comment">#一个数 0~1之间</span></span><br><span class="line">r1 = np.random.rand(<span class="number">1</span>) <span class="comment">#一行一列数组</span></span><br><span class="line">r2 = np.random.rand(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#2行3列数组</span></span><br></pre></td></tr></table></figure><h3 id="2-randn-函数"><a href="#2-randn-函数" class="headerlink" title="2.randn()函数"></a>2.randn()函数</h3><p>​生成一个(d0, d1, …, dn)维的数组，数组的元素是标准正太分布随机数</p><p>​语法:numpy.random.randn(d0, d1, …, dn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.   randn()函数  numpy.random.randn(d0, d1, ..., dn)</span></span><br><span class="line">rn1 = np.random.randn()<span class="comment">#一个数 0~1之间</span></span><br><span class="line">rn2 = np.random.randn(<span class="number">1</span>)<span class="comment">#一行一列数组</span></span><br><span class="line">rn3 = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#2行3列数组</span></span><br></pre></td></tr></table></figure><h3 id="3-randint-函数"><a href="#3-randint-函数" class="headerlink" title="3. randint()函数"></a>3. randint()函数</h3><p>​生成指定范围的随机数，随机数取值区间为[low, high)，若没有输入参数high则取值区间为[0, low)</p><p>​语法:numpy.random.randint(low [, high, size, dtype])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3. randint()函数  numpy.random.randint(low [, high, size, dtype])</span></span><br><span class="line">rt1 = np.random.randint(<span class="number">3</span>) <span class="comment">#0~2的整数</span></span><br><span class="line">rt2 = np.random.randint(<span class="number">3</span>,size=<span class="number">1</span>) <span class="comment">#0~2的整数, 大小为1行一列的数组</span></span><br><span class="line">rt3 = np.random.randint(<span class="number">3</span>,size=(<span class="number">2</span>,<span class="number">3</span>),dtype=<span class="string">&#x27;int64&#x27;</span>) <span class="comment">#0~2的整数, 大小为2行3列的数组</span></span><br><span class="line"><span class="comment"># print(rt3)</span></span><br></pre></td></tr></table></figure><h3 id="4-random-函数"><a href="#4-random-函数" class="headerlink" title="4.random()函数"></a>4.random()函数</h3><p>​  产生[0.0, 1.0)之间的浮点数，但数组的元素不包括1</p><p>​      语法:numpy.random.random(size&#x3D;None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4.用random()生成随机数</span></span><br><span class="line">random = np.random.random()  <span class="comment">#1个随机数</span></span><br><span class="line">random1 = np.random.random(<span class="number">5</span>)  <span class="comment">#5个随机数数组</span></span><br><span class="line"><span class="comment"># print(random)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计网知识</title>
      <link href="/esblog/15738.html"/>
      <url>/esblog/15738.html</url>
      
        <content type="html"><![CDATA[<p>一些之后可能会用到知识</p><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><h3 id="1-TCP三次握手四次挥手"><a href="#1-TCP三次握手四次挥手" class="headerlink" title="1.TCP三次握手四次挥手"></a>1.TCP三次握手四次挥手</h3><p>TCP（传输控制协议）是一种可靠的、面向连接的传输层协议，用于在网络中可靠地传输数据。在建立和终止连接时，TCP 使用三次握手和四次挥手来确保通信的可靠性。下面我会分别解释三次握手和四次挥手的过程：</p><p><strong>TCP 三次握手（Three-Way Handshake）：</strong></p><ol><li>第一次握手（SYN）：客户端向服务器发送一个连接请求报文段，其中设置 SYN（同步序列编号）标志为 1，并选择一个初始序列号（Seq）用于后续的数据传输。</li><li>第二次握手（SYN+ACK）：服务器收到客户端的连接请求后，会返回一个连接应答报文段。该应答报文段设置 SYN 和 ACK 标志为 1，表示确认客户端的连接请求，并为后续数据传输选择自己的初始序列号（Seq），同时也确认客户端的初始序列号（Seq+1）。</li><li>第三次握手（ACK）：客户端收到服务器的连接应答后，会再次发送确认报文段。该报文段的 ACK 标志为 1，表示确认服务器的连接应答，客户端和服务器的连接建立完成。</li></ol><p><strong>TCP 四次挥手（Four-Way Handshake）：</strong></p><ol><li>第一次挥手（FIN）：客户端希望关闭连接，向服务器发送一个连接释放报文段。该报文段设置 FIN（终止）标志为 1，表示客户端不再发送数据。</li><li>第二次挥手（ACK）：服务器收到客户端的连接释放请求后，发送一个确认报文段作为响应，表示已经收到了客户端的释放请求。</li><li>第三次挥手（FIN）：服务器也希望关闭连接，向客户端发送一个连接释放报文段。该报文段设置 FIN 标志为 1，表示服务器不再发送数据。</li><li>第四次挥手（ACK）：客户端收到服务器的连接释放请求后，发送一个确认报文段作为响应，表示已经收到了服务器的释放请求。此时，客户端和服务器的连接终止。</li></ol><p>值得注意的是，TCP 是全双工的协议，所以客户端和服务器可以同时进行收发数据。在四次挥手中，客户端和服务器都需要发送 FIN 报文段来关闭连接，因此总共需要四次握手才能完成连接的终止。</p><h3 id="2-OSI七层网络模型"><a href="#2-OSI七层网络模型" class="headerlink" title="2.OSI七层网络模型"></a>2.OSI七层网络模型</h3><p>OSI（开放式系统互联）七层网络模型是一种用于理解和描述计算机网络功能的框架。它将计算机网络通信过程划分为七个层次，每个层次负责特定的功能。每个层次都依赖于其下方的层次，并为上方的层次提供服务。这样的模型提供了一种标准化的方法，使不同厂商的网络设备和软件能够相互通信。</p><p>以下是 OSI 七层网络模型及其对应的功能：</p><ol><li><strong>物理层（Physical Layer）</strong>：<ul><li>功能：负责在物理介质上传输原始比特流，即在传输介质上发送和接收二进制数据。处理传输介质、接口、电压和物理连接等。</li><li>示例设备：网线、集线器（Hub）等。</li></ul></li><li><strong>数据链路层（Data Link Layer）</strong>：<ul><li>功能：在直接相连的节点之间提供可靠的数据传输，通过帧传输数据，并在通信链路上进行错误检测和纠正。</li><li>示例设备：网卡、交换机（Switch）等。</li></ul></li><li><strong>网络层（Network Layer）</strong>：<ul><li>功能：负责通过多个网络进行数据包转发，实现源到目的地之间的数据路由和寻址，处理IP地址和路由选择。</li><li>示例设备：路由器（Router）等。</li></ul></li><li><strong>传输层（Transport Layer）</strong>：<ul><li>功能：负责提供端到端的可靠数据传输，处理分段和重组数据，确保数据的可靠传输和错误恢复。</li><li>示例协议：TCP（传输控制协议）、UDP（用户数据报协议）。</li></ul></li><li><strong>会话层（Session Layer）</strong>：<ul><li>功能：负责在网络中的两个节点之间建立、维护和终止会话连接，为数据传输提供逻辑连接。</li><li>示例功能：设备身份验证、会话管理等。</li></ul></li><li><strong>表示层（Presentation Layer）</strong>：<ul><li>功能：负责数据的格式化、编码和解码，确保数据在通信过程中能够正确解释和理解。</li><li>示例功能：数据加密、压缩等。</li></ul></li><li><strong>应用层（Application Layer）</strong>：<ul><li>功能：最接近用户的层次，提供网络服务和应用程序之间的接口，支持各种网络应用和服务，例如电子邮件、文件传输等。</li><li>示例协议：HTTP（超文本传输协议）、FTP（文件传输协议）等。</li></ul></li></ol><p>通过将网络通信划分为七个层次，OSI 模型提供了一种清晰的结构和分层的方法来理解网络功能和通信过程，同时也方便了不同厂商和技术之间的互操作性。然而，在实际网络中，常用的 TCP&#x2F;IP 模型也被广泛采用，它是一种与 OSI 模型类似的网络模型。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/esblog/16107.html"/>
      <url>/esblog/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
